. "${GRIMOIRE}/FUNCTIONS"
. "${GRIMOIRE}/MESON_FUNCTIONS"
           SPELL="libsrm"
if [[ "${LIBSRM_BRANCH}" == "scm" ]]; then
         VERSION="$(get_scm_version)"
          SOURCE="${SPELL}-scm.tar.xz"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-scm"
   SOURCE_URL[0]="git_http://github.com/CuarzoSoftware/SRM:${SPELL}-scm:main"
   SOURCE_IGNORE="volatile"
  FORCE_DOWNLOAD="on"
else
         VERSION="0.10.0-1"
     SOURCE_HASH="sha512:faba4d56ef90f40f931f0d13d617463ce25d63c7137e7d19f9cc0c25fe9be86034341fbffb4babda40ab5f2a66791c83867c82209634f6e7242c7582d5a69b4b"
          SOURCE="${SPELL}-${VERSION}.tar.gz"
   SOURCE_URL[0]="https://github.com/CuarzoSoftware/SRM/archive/refs/tags/v${VERSION}.tar.gz"
# Watch: https://github.com/CuarzoSoftware/SRM/tags tags/v([0-9.\-]+)[.]tar
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/SRM-${VERSION}"
fi
        WEB_SITE="https://cuarzosoftware.github.io/SRM/index.html"
         ENTERED="20231128"
      LICENSE[0]="MIT"
        KEYWORDS="rendering manager library"
           SHORT="Simple Rendering Manager"
cat << EOF
SRM is a C library that simplifies the development of Linux DRM/KMS
applications.

With SRM, you can focus on the OpenGL ES 2.0 logic of your application.
For each available display, you can start a rendering thread that triggers
common events like initializeGL(), paintGL(), resizeGL(), pageFlipped() and
uninitializeGL().

SRM allows you to use multiple GPUs simultaneously and automatically finds the
most efficient configuration. It also offers functions for creating OpenGL
textures, which are automatically shared among GPUs.
EOF
