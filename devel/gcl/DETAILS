. "$GRIMOIRE/FUNCTIONS"
# Watch: https://ftp.gnu.org/gnu/gcl
           SPELL=gcl
if [[ "$GCL_BRANCH" == "scm" ]]; then
         VERSION=$(get_scm_version)
          SOURCE=$SPELL-cvs.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-cvs
   SOURCE_URL[0]=cvs://:pserver:anonymous@cvs.savannah.gnu.org:/sources/gcl:gcl
   SOURCE_IGNORE=volatile
  FORCE_DOWNLOAD=1
else
         VERSION=2.6.7
          SOURCE=$SPELL-$VERSION.tar.gz
         SOURCE2=$SOURCE.sig
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
   SOURCE_URL[0]=$GNU_URL/$SPELL/$SOURCE
   SOURCE_URL[1]=ftp://ftp.gnu.org/pub/gnu/$SPELL/$SOURCE
  SOURCE2_URL[0]=${SOURCE_URL[0]}.sig
  SOURCE2_URL[1]=${SOURCE_URL[1]}.sig
      SOURCE_GPG=gnu-verified.gpg:$SOURCE2:UPSTREAM_KEY
  SOURCE2_IGNORE=signature
fi
        WEB_SITE=http://www.gnu.org/software/gcl/gcl.html
         ENTERED=20020312
         UPDATED=20030907
      MAKE_NJOBS=1
      LICENSE[0]=GPL
           SHORT="GNU Compiler and interpreter for Common Lisp"
cat << EOF
GNU Common Lisp (GCL, formerly known as Austin Kyoto Common Lisp) is 
a compiler and interpreter for Common Lisp. GCL is very portable and 
extremely efficient on a wide class of applications, and compares 
favorably in performance with commercial Lisps on several large 
theorem--prover and symbolic algebra systems. GCL supports the CLtL1 
specification.

Some advantages

    * GCL compiles to C and then uses the native optimizing C compiler 
      (e.g., GCC), giving great portability.
    * Highly efficient. A function call is basically the same speed as
      a C function call, in fact identical to a C function call via a 
      pointer.
    * It has a source level Lisp debugger (dbl) for interpreted code, 
      letting you step a line at a time, while displaying the your 
      position in an Emacs window. This is invaluable when trying to 
      understand large systems.
    * Has pioneered conservative Garbage Collection schemes.
    * Also has a garbage collection scheme, for only recent allocations, 
      based on native page fault handling. This is the stratified 
      garbage collection (SGC).
    * Very reliable. People have huge chip verification suites which 
      run for extended periods. I have had computations which ran for 
      weeks. There are no leaks.
    * Very fast. I have numerous users who claim their code runs two 
      times under GCL, than in competitive lisps.
    * New features such as fast regexp matching (using my new algorithm).
    * Socket code is being added.
    * A new Windows 95 port is in progress.
    * Can be used in commercial applications, since covered by the 
      Gnu library license, which permits you to distribute a system 
      including GCL, as long as you distribute your binary .o files as 
      well.
    * built in interface to Tk widget system. Allows a mixture of tcl 
      and common lisp to be used in a user interface--your choice which 
      you use.
    * Special permission can be given for other commercial applications.
    * Support available from the developer.
EOF
