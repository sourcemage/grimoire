. "${GRIMOIRE}/MESON_FUNCTIONS"
           SPELL="graphene"
         VERSION="1.10.8"
     SOURCE_HASH=sha512:c56dab6712cf58387d0512a213cd0cd456679e46a495ee5cfd9bc25440cda2d72d56974af4e462f3c863869a1e2e506b702f468933045609d35fdf006212c67d
          SOURCE="${SPELL}-${VERSION}.tar.xz"
SOURCE_DIRECTORY="${BUILD_DIRECTORY}/${SPELL}-${VERSION}"
   SOURCE_URL[0]="${GNOME_URL}/sources/${SPELL}/${VERSION%.*}/${SOURCE}"
   SOURCE_URL[1]="https://github.com/ebassi/${SPELL}/releases/download/${VERSION}/${SOURCE}"
      LICENSE[0]="MIT"
        WEB_SITE="https://ebassi.github.io/graphene/"
         ENTERED="20190122"
           SHORT="a thin layer of types for graphic libraries"
cat << EOF
Graphene provides common types needed to handle 3D transformations:
  * 2D points
  * 3D points
  * triangles
  * rectangles
  * quads
  * quaternions
  * euler angles
  * vectors (2, 3, or 4-sized)
  * matrices
  * planes
  * 3D boxes
  * spheres
  * frustums

Graphene also provides its low-level SIMD vector and matrix types, which are
used to implement the API above.

All types can be placed on the stack, but provide allocation/free functions for
working on the heap as well. The contents of all structure types, unless noted
otherwise, should be considered private, and should never be accessed directly.
EOF
