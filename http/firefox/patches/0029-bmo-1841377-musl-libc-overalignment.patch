
# HG changeset patch
# User Xi Ruoyao <xry111@xry111.site>
# Date 1689069778 0
# Node ID f6a610679661486ccd236a445cfb9862e21a36dd
# Parent  e4dbb1e6c72201d69477e5686de0cead6e063ca1
Bug 1841040 - Remove over-alignment from GCMarker and Nursery, r=spidermonkey-reviewers,jonco

js_new<T> cannot guarantee the alignment if T is over-aligned, and this
issue is not trivial to fix (blocked by Bug 1842582).

Add a static assert to detect the attempt using js_new<T> for
over-aligned T, and remove the problematic alignas() attributes as a
short-term fix.

Differential Revision: https://phabricator.services.mozilla.com/D182546

diff --git a/js/public/Utility.h b/js/public/Utility.h
--- a/js/public/Utility.h
+++ b/js/public/Utility.h
@@ -473,32 +473,38 @@ static inline void js_free(void* p) {
  * JS_DECLARE_NEW_METHODS (see js::MallocProvider for an example).
  *
  * Note: Do not add a ; at the end of a use of JS_DECLARE_NEW_METHODS,
  * or the build will break.
  */
 #define JS_DECLARE_NEW_METHODS(NEWNAME, ALLOCATOR, QUALIFIERS)              \
   template <class T, typename... Args>                                      \
   QUALIFIERS T* MOZ_HEAP_ALLOCATOR NEWNAME(Args&&... args) {                \
+    static_assert(                                                          \
+        alignof(T) <= alignof(max_align_t),                                 \
+        "over-aligned type is not supported by JS_DECLARE_NEW_METHODS");    \
     void* memory = ALLOCATOR(sizeof(T));                                    \
     return MOZ_LIKELY(memory) ? new (memory) T(std::forward<Args>(args)...) \
                               : nullptr;                                    \
   }
 
 /*
  * Given a class which should provide a 'new' method that takes an arena as
  * its first argument, add JS_DECLARE_NEW_ARENA_METHODS
  * (see js::MallocProvider for an example).
  *
  * Note: Do not add a ; at the end of a use of JS_DECLARE_NEW_ARENA_METHODS,
  * or the build will break.
  */
 #define JS_DECLARE_NEW_ARENA_METHODS(NEWNAME, ALLOCATOR, QUALIFIERS)           \
   template <class T, typename... Args>                                         \
   QUALIFIERS T* MOZ_HEAP_ALLOCATOR NEWNAME(arena_id_t arena, Args&&... args) { \
+    static_assert(                                                             \
+        alignof(T) <= alignof(max_align_t),                                    \
+        "over-aligned type is not supported by JS_DECLARE_NEW_ARENA_METHODS"); \
     void* memory = ALLOCATOR(arena, sizeof(T));                                \
     return MOZ_LIKELY(memory) ? new (memory) T(std::forward<Args>(args)...)    \
                               : nullptr;                                       \
   }
 
 /*
  * Given a class which should provide 'make' methods, add
  * JS_DECLARE_MAKE_METHODS (see js::MallocProvider for an example).  This
diff --git a/js/src/gc/GCMarker.h b/js/src/gc/GCMarker.h
--- a/js/src/gc/GCMarker.h
+++ b/js/src/gc/GCMarker.h
@@ -269,17 +269,17 @@ using ParallelMarkingTracer = MarkingTra
 
 enum ShouldReportMarkTime : bool {
   ReportMarkTime = true,
   DontReportMarkTime = false
 };
 
 } /* namespace gc */
 
-class alignas(TypicalCacheLineSize) GCMarker {
+class GCMarker {
   enum MarkingState : uint8_t {
     // Have not yet started marking.
     NotActive,
 
     // Root marking mode. This sets the hasMarkedCells flag on compartments
     // containing objects and scripts, which is used to make sure we clean up
     // dead compartments.
     RootMarking,
diff --git a/js/src/gc/Nursery.h b/js/src/gc/Nursery.h
--- a/js/src/gc/Nursery.h
+++ b/js/src/gc/Nursery.h
@@ -63,17 +63,17 @@ class JS_PUBLIC_API Sprinter;
 
 namespace gc {
 class AutoGCSession;
 struct Cell;
 class GCSchedulingTunables;
 class TenuringTracer;
 }  // namespace gc
 
-class alignas(TypicalCacheLineSize) Nursery {
+class Nursery {
  public:
   explicit Nursery(gc::GCRuntime* gc);
   ~Nursery();
 
   [[nodiscard]] bool init(AutoLockGCBgAlloc& lock);
 
   // Number of allocated (ready to use) chunks.
   unsigned allocatedChunkCount() const { return chunks_.length(); }

