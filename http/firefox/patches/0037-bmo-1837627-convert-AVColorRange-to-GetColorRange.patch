
# HG changeset patch
# User stransky <stransky@redhat.com>
# Date 1690447248 0
# Node ID b42bac6cd95acd03ec2418f6079f886e424081ab
# Parent  0963f5b18821bbcac2c9799552a6d60fc31ae7ae
Bug 1837627 Implement GetColorRange() to convert AVColorRange to gfx::ColorRange r=alwu

Depends on D184469

Differential Revision: https://phabricator.services.mozilla.com/D184472

diff --git a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
--- a/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
+++ b/dom/media/platforms/ffmpeg/FFmpegVideoDecoder.cpp
@@ -584,16 +584,21 @@ RefPtr<MediaDataDecoder::InitPromise> FF
   rv = InitDecoder();
   if (NS_SUCCEEDED(rv)) {
     return InitPromise::CreateAndResolve(TrackInfo::kVideoTrack, __func__);
   }
 
   return InitPromise::CreateAndReject(rv, __func__);
 }
 
+static gfx::ColorRange GetColorRange(enum AVColorRange& aColorRange) {
+  return aColorRange == AVCOL_RANGE_JPEG ? gfx::ColorRange::FULL
+                                         : gfx::ColorRange::LIMITED;
+}
+
 static gfx::ColorDepth GetColorDepth(const AVPixelFormat& aFormat) {
   switch (aFormat) {
     case AV_PIX_FMT_YUV420P:
     case AV_PIX_FMT_YUVJ420P:
     case AV_PIX_FMT_YUV422P:
     case AV_PIX_FMT_YUV444P:
       return gfx::ColorDepth::COLOR_8;
     case AV_PIX_FMT_YUV420P10LE:
@@ -742,19 +747,17 @@ FFmpegVideoDecoder<LIBAV_VER>::AllocateT
         aCodecContext->colorspace, aCodecContext->pix_fmt,
         data.mPictureRect.Size());
   } else {
     data.mYUVColorSpace = mInfo.mColorSpace
                               ? *mInfo.mColorSpace
                               : DefaultColorSpace(data.mPictureRect.Size());
   }
   data.mColorDepth = GetColorDepth(aCodecContext->pix_fmt);
-  data.mColorRange = aCodecContext->color_range == AVCOL_RANGE_JPEG
-                         ? gfx::ColorRange::FULL
-                         : gfx::ColorRange::LIMITED;
+  data.mColorRange = GetColorRange(aCodecContext->color_range);
 
   FFMPEG_LOGV(
       "Created plane data, YSize=(%d, %d), CbCrSize=(%d, %d), "
       "CroppedYSize=(%d, %d), CroppedCbCrSize=(%d, %d), ColorDepth=%hhu",
       paddedYSize.Width(), paddedYSize.Height(), paddedCbCrSize.Width(),
       paddedCbCrSize.Height(), data.YPictureSize().Width(),
       data.YPictureSize().Height(), data.CbCrPictureSize().Width(),
       data.CbCrPictureSize().Height(), static_cast<uint8_t>(data.mColorDepth));
@@ -1325,18 +1328,17 @@ gfx::ColorRange FFmpegVideoDecoder<LIBAV
   AVColorRange range = AVCOL_RANGE_UNSPECIFIED;
 #if LIBAVCODEC_VERSION_MAJOR > 58
   range = mFrame->color_range;
 #else
   if (mLib->av_frame_get_color_range) {
     range = (AVColorRange)mLib->av_frame_get_color_range(mFrame);
   }
 #endif
-  return range == AVCOL_RANGE_JPEG ? gfx::ColorRange::FULL
-                                   : gfx::ColorRange::LIMITED;
+  return GetColorRange(range);
 }
 
 MediaResult FFmpegVideoDecoder<LIBAV_VER>::CreateImage(
     int64_t aOffset, int64_t aPts, int64_t aDuration,
     MediaDataDecoder::DecodedData& aResults) const {
   FFMPEG_LOG("Got one frame output with pts=%" PRId64 " dts=%" PRId64
              " duration=%" PRId64 " opaque=%" PRId64,
              aPts, mFrame->pkt_dts, aDuration, mCodecContext->reordered_opaque);

